"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const tslib_1 = require("tslib");
const ast_types_1 = require("ast-types");
const validation_1 = require("../validation");
const schema_1 = (0, tslib_1.__importDefault)(require("../validation/schema"));
const ALIASES = {
    'json-schema-2019-09': 'json-schema-draft-2019-09',
    'json-schema-2020-12': 'json-schema-draft-2020-12',
};
const REPLACEMENTS = Object.fromEntries(schema_1.default.properties.formats.items.enum.map(format => {
    var _a;
    return [
        format,
        ((_a = ALIASES[format]) !== null && _a !== void 0 ? _a : format)
            .replace(/\.|(?<=[0-9])-(?=[0-9])/g, '_')
            .replace(/-([0-9a-z])/g, (match, char) => String(char).toUpperCase()),
    ];
}));
function transform(input, ctx) {
    (0, validation_1.assertArray)(input);
    return ast_types_1.builders.arrayExpression(Array.from(new Set(input.map(format => {
        (0, validation_1.assertString)(format);
        return ctx.tree.addImport(REPLACEMENTS[format], '@stoplight/spectral-formats');
    }))));
}
const transformer = function (hooks) {
    hooks.add([/^\/aliases\/[^/]+\/targets\/\d+\/formats$/, transform]);
    hooks.add([/^(\/overrides\/\d+)?\/formats$/, transform]);
    hooks.add([/^(\/overrides\/\d+)?\/rules\/[^/]+\/formats$/, transform]);
};
exports.default = transformer;
//# sourceMappingURL=formats.js.map