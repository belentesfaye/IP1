import fs from 'fs';
import path from 'path';
import { tokens, commonTokens } from '@stryker-mutator/api/plugin';
import * as pluginTokens from '../plugin-tokens.js';
/**
 * The Default config loader will load the Jest configuration using the package.json in the package root
 */
export class CustomJestConfigLoader {
    constructor(log, options, requireFromCwd) {
        this.log = log;
        this.options = options;
        this.requireFromCwd = requireFromCwd;
    }
    loadConfig() {
        var _a, _b;
        const jestConfig = (_b = (_a = this.readConfigFromJestConfigFile()) !== null && _a !== void 0 ? _a : this.readConfigFromPackageJson()) !== null && _b !== void 0 ? _b : {};
        this.log.debug('Final jest config: %s', jestConfig);
        return jestConfig;
    }
    readConfigFromJestConfigFile() {
        const configFilePath = this.resolveJestConfigFilePath();
        if (configFilePath) {
            const config = this.requireFromCwd(configFilePath);
            this.log.debug(`Read Jest config from ${configFilePath}`);
            this.setRootDir(config, configFilePath);
            return config;
        }
        return undefined;
    }
    readConfigFromPackageJson() {
        var _a;
        const pkgJsonFilePath = this.resolvePackageJsonFilePath();
        if (pkgJsonFilePath) {
            const config = (_a = JSON.parse(fs.readFileSync(pkgJsonFilePath, 'utf8')).jest) !== null && _a !== void 0 ? _a : {};
            this.log.debug(`Read Jest config from ${pkgJsonFilePath}`);
            this.setRootDir(config, pkgJsonFilePath);
            return config;
        }
        return undefined;
    }
    resolvePackageJsonFilePath() {
        var _a;
        const jestOptions = this.options;
        const packageJsonCandidate = path.resolve((_a = jestOptions.jest.configFile) !== null && _a !== void 0 ? _a : 'package.json');
        if (packageJsonCandidate.endsWith('package.json') && (jestOptions.jest.configFile || fs.existsSync(packageJsonCandidate))) {
            return packageJsonCandidate;
        }
        return undefined;
    }
    setRootDir(config, configFilePath) {
        var _a;
        config.rootDir = path.resolve(path.dirname(configFilePath), (_a = config.rootDir) !== null && _a !== void 0 ? _a : '.');
    }
    resolveJestConfigFilePath() {
        var _a;
        const jestOptions = this.options;
        const configFileCandidate = path.resolve((_a = jestOptions.jest.configFile) !== null && _a !== void 0 ? _a : 'jest.config.js');
        if (!configFileCandidate.endsWith('package.json') && (jestOptions.jest.configFile || fs.existsSync(configFileCandidate))) {
            return configFileCandidate;
        }
        return undefined;
    }
}
CustomJestConfigLoader.inject = tokens(commonTokens.logger, commonTokens.options, pluginTokens.requireFromCwd);
//# sourceMappingURL=custom-jest-config-loader.js.map