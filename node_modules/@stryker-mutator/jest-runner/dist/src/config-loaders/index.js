import { createRequire } from 'module';
import { tokens, commonTokens } from '@stryker-mutator/api/plugin';
import { requireResolve } from '@stryker-mutator/util';
import * as pluginTokens from '../plugin-tokens.js';
import { CustomJestConfigLoader } from './custom-jest-config-loader.js';
import { ReactScriptsJestConfigLoader } from './react-scripts-jest-config-loader.js';
configLoaderFactory.inject = tokens(commonTokens.options, commonTokens.injector, commonTokens.logger);
export function configLoaderFactory(options, injector, log) {
    const warnAboutConfigFile = (projectType, configFile) => {
        if (configFile) {
            log.warn(`Config setting "configFile" is not supported for projectType "${projectType}"`);
        }
    };
    const optionsWithJest = options;
    const configLoaderInjector = injector
        .provideValue(pluginTokens.resolve, createRequire(import.meta.url).resolve)
        .provideValue(pluginTokens.requireFromCwd, requireResolve)
        .provideValue(pluginTokens.processEnv, process.env);
    switch (optionsWithJest.jest.projectType) {
        case 'custom':
            return configLoaderInjector.injectClass(CustomJestConfigLoader);
        case 'create-react-app':
            warnAboutConfigFile(optionsWithJest.jest.projectType, optionsWithJest.jest.configFile);
            return configLoaderInjector.injectClass(ReactScriptsJestConfigLoader);
        default:
            throw new Error(`No configLoader available for ${optionsWithJest.jest.projectType}`);
    }
}
//# sourceMappingURL=index.js.map