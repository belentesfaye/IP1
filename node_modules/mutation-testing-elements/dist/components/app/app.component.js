var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html, unsafeCSS } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { calculateMutationTestMetrics } from 'mutation-testing-metrics';
import { bootstrap, globals } from '../../style';
import { locationChange$, View } from '../../lib/router';
import style from './app.scss';
import theme from './theme.scss';
import { createCustomEvent } from '../../lib/custom-events';
import { toAbsoluteUrl } from '../../lib/html-helpers';
import { isLocalStorageAvailable } from '../../lib/browser';
let MutationTestReportAppComponent = class MutationTestReportAppComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.context = { view: View.mutant, path: [] };
        this.path = [];
        this.themeSwitch = (event) => {
            this.theme = event.detail;
            isLocalStorageAvailable() && localStorage.setItem('mutation-testing-elements-theme', this.theme);
        };
        this.subscriptions = [];
    }
    get themeBackgroundColor() {
        return getComputedStyle(this).getPropertyValue('--bs-body-bg');
    }
    get title() {
        if (this.context.result) {
            if (this.titlePostfix) {
                return `${this.context.result.name} - ${this.titlePostfix}`;
            }
            else {
                return this.context.result.name;
            }
        }
        else {
            return '';
        }
    }
    firstUpdated() {
        // Set the default view to "mutant" when no route is selected
        if (this.path.length === 0 || (this.path[0] !== View.mutant && this.path[0] !== View.test)) {
            window.location.replace(toAbsoluteUrl(`${View.mutant}`));
        }
    }
    async loadData() {
        if (this.src) {
            try {
                const res = await fetch(this.src);
                this.report = await res.json();
            }
            catch (error) {
                const e = String(error);
                this.errorMessage = e;
            }
        }
    }
    async willUpdate(changedProperties) {
        // Set the theme when no theme is selected (light vs dark)
        if (!this.theme) {
            this.theme = this.getTheme();
        }
        if (this.report) {
            if (changedProperties.has('report')) {
                this.updateModel(this.report);
            }
            if (changedProperties.has('path') || changedProperties.has('report')) {
                this.updateContext();
                this.updateTitle();
            }
        }
        if (changedProperties.has('src')) {
            await this.loadData();
        }
    }
    updated(changedProperties) {
        if (changedProperties.has('theme') && this.theme) {
            this.dispatchEvent(createCustomEvent('theme-changed', { theme: this.theme, themeBackgroundColor: this.themeBackgroundColor }));
        }
    }
    getTheme() {
        var _a;
        // 1. check local storage
        const theme = isLocalStorageAvailable() && localStorage.getItem('mutation-testing-elements-theme');
        if (theme) {
            return theme;
            // 2. check for user's OS preference
        }
        else if (window.matchMedia && ((_a = window.matchMedia('(prefers-color-scheme: dark)')) === null || _a === void 0 ? void 0 : _a.matches)) {
            return 'dark';
            // 3. default is light
        }
        else {
            return 'light';
        }
    }
    updateModel(report) {
        this.rootModel = calculateMutationTestMetrics(report);
    }
    updateContext() {
        if (this.rootModel) {
            const findResult = (root, path) => {
                return path.reduce((model, currentPathPart) => model && model.childResults.find((child) => child.name === currentPathPart), root);
            };
            const path = this.path.slice(1);
            if (this.path[0] === View.test && this.rootModel.testMetrics) {
                this.context = {
                    view: View.test,
                    path,
                    result: findResult(this.rootModel.testMetrics, this.path.slice(1)),
                };
            }
            else {
                this.context = {
                    view: View.mutant,
                    path,
                    result: findResult(this.rootModel.systemUnderTestMetrics, this.path.slice(1)),
                };
            }
        }
    }
    updateTitle() {
        document.title = this.title;
    }
    connectedCallback() {
        super.connectedCallback();
        this.subscriptions.push(locationChange$.subscribe((path) => (this.path = path)));
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
    }
    renderTitle() {
        if (this.context.result) {
            return html `<h1 class="display-4"
        >${this.context.result.name}${this.titlePostfix ? html `<small class="text-muted"> - ${this.titlePostfix}</small>` : ''}</h1
      >`;
        }
        return undefined;
    }
    render() {
        if (this.context.result || this.errorMessage) {
            return html `
        <div class="container-fluid">
          <div class="row">
            <div class="col-md-12">
              ${this.renderErrorMessage()}
              <mte-theme-switch @theme-switch="${this.themeSwitch}" class="theme-switch" .theme="${this.theme}"> </mte-theme-switch>
              ${this.renderTitle()} ${this.renderTabs()}
              <mte-breadcrumb .view="${this.context.view}" .path="${this.context.path}"></mte-breadcrumb>
              ${this.context.view === 'mutant' && this.context.result
                ? html `<mte-mutant-view
                    .result="${this.context.result}"
                    .thresholds="${this.report.thresholds}"
                    .path="${this.path}"
                  ></mte-mutant-view>`
                : ''}
              ${this.context.view === 'test' && this.context.result
                ? html `<mte-test-view .result="${this.context.result}" .path="${this.path}"></mte-test-view>`
                : ''}
            </div>
          </div>
        </div>
      `;
        }
        else {
            return html ``;
        }
    }
    renderErrorMessage() {
        if (this.errorMessage) {
            return html `<div class="alert alert-danger" role="alert">${this.errorMessage}</div>`;
        }
        else {
            return html ``;
        }
    }
    renderTabs() {
        var _a;
        if ((_a = this.rootModel) === null || _a === void 0 ? void 0 : _a.testMetrics) {
            return html `<nav>
        <ul class="nav nav-tabs border-bottom-0" role="tablist">
          <li class="nav-item">
            <a class="nav-link ${this.context.view === 'mutant' ? 'active' : ''}" role="tab" href="${toAbsoluteUrl('mutant')}">ðŸ‘½ Mutants</a>
          </li>
          <li class="nav-item">
            <a class="nav-link ${this.context.view === 'test' ? 'active' : ''}" role="tab" href="${toAbsoluteUrl('test')}">ðŸ§ª Tests</a>
          </li>
        </ul>
      </nav>`;
        }
        else {
            return undefined;
        }
    }
};
MutationTestReportAppComponent.styles = [globals, unsafeCSS(theme), bootstrap, unsafeCSS(style)];
__decorate([
    property({ attribute: false })
], MutationTestReportAppComponent.prototype, "report", void 0);
__decorate([
    property({ attribute: false })
], MutationTestReportAppComponent.prototype, "rootModel", void 0);
__decorate([
    property()
], MutationTestReportAppComponent.prototype, "src", void 0);
__decorate([
    property({ attribute: false })
], MutationTestReportAppComponent.prototype, "errorMessage", void 0);
__decorate([
    property({ attribute: false })
], MutationTestReportAppComponent.prototype, "context", void 0);
__decorate([
    property()
], MutationTestReportAppComponent.prototype, "path", void 0);
__decorate([
    property({ attribute: 'title-postfix' })
], MutationTestReportAppComponent.prototype, "titlePostfix", void 0);
__decorate([
    property({ reflect: true })
], MutationTestReportAppComponent.prototype, "theme", void 0);
__decorate([
    property({ attribute: false })
], MutationTestReportAppComponent.prototype, "themeBackgroundColor", null);
__decorate([
    property()
], MutationTestReportAppComponent.prototype, "title", null);
MutationTestReportAppComponent = __decorate([
    customElement('mutation-test-report-app')
], MutationTestReportAppComponent);
export { MutationTestReportAppComponent };
//# sourceMappingURL=app.component.js.map