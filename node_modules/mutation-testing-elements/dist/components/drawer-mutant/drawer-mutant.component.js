var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, unsafeCSS } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { MutantStatus } from 'mutation-testing-report-schema/api';
import { describeLocation, getEmojiForStatus, plural, renderIf, renderIfPresent } from '../../lib/html-helpers';
import { bootstrap } from '../../style';
import style from './drawer-mutant.scss';
const describeTest = (test) => html `${test.name}${test.sourceFile && test.location ? ` (${describeLocation(test)})` : ''}`;
let MutationTestReportDrawerMutant = class MutationTestReportDrawerMutant extends LitElement {
    constructor() {
        super(...arguments);
        this.mode = 'closed';
    }
    render() {
        var _a, _b;
        return html `<mte-drawer ?hasDetail="${((_a = this.mutant) === null || _a === void 0 ? void 0 : _a.killedByTests) || ((_b = this.mutant) === null || _b === void 0 ? void 0 : _b.coveredByTests)}" .mode="${this.mode}">
      ${renderIfPresent(this.mutant, (mutant) => html `
          <span slot="header"
            >${mutant.id} ${getEmojiForStatus(mutant.status)} ${mutant.mutatorName} ${mutant.status}
            (${mutant.location.start.line}:${mutant.location.start.column})</span
          >
          <span slot="summary">${this.renderSummary()}</span>
          <span slot="detail">${this.renderDetail()}</span>
        `)}
    </mte-drawer>`;
    }
    renderSummary() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return html `<div class="d-flex mx-2">
      ${((_b = (_a = this.mutant) === null || _a === void 0 ? void 0 : _a.killedByTests) === null || _b === void 0 ? void 0 : _b[0])
            ? html `<h6 class="pe-4"
            >🎯 Killed by: ${(_c = this.mutant.killedByTests) === null || _c === void 0 ? void 0 : _c[0].name}
            ${this.mutant.killedByTests.length > 1 ? html `(and ${this.mutant.killedByTests.length - 1} more)` : undefined}</h6
          >`
            : undefined}
      ${renderIf((_d = this.mutant) === null || _d === void 0 ? void 0 : _d.static, html `<h6 class="pe-4">🗿 Static mutant</h6>`)}
      ${renderIfPresent((_e = this.mutant) === null || _e === void 0 ? void 0 : _e.coveredByTests, (coveredTests) => {
            var _a;
            return html `<h6 class="pe-4"
            >☂️ Covered by ${coveredTests.length} test${plural(coveredTests)}
            ${renderIf(((_a = this.mutant) === null || _a === void 0 ? void 0 : _a.status) === MutantStatus.Survived, '(yet still survived)')}</h6
          >`;
        })}
      ${renderIf((_g = (_f = this.mutant) === null || _f === void 0 ? void 0 : _f.statusReason) === null || _g === void 0 ? void 0 : _g.trim(), html `<h6 class="pe-4" title="Reason for the ${this.mutant.status} status">🕵️ ${this.mutant.statusReason}</h6>`)}
      ${renderIfPresent((_h = this.mutant) === null || _h === void 0 ? void 0 : _h.description, (description) => html `<h6 class="pe-4">📖 ${description}</h6>`)}
    </div>`;
    }
    renderDetail() {
        var _a, _b, _c, _d;
        return html `<ul class="list-group">
      ${(_b = (_a = this.mutant) === null || _a === void 0 ? void 0 : _a.killedByTests) === null || _b === void 0 ? void 0 : _b.map((test) => html `<li title="This mutant was killed by this test" class="list-group-item">🎯 ${describeTest(test)}</li>`)}
      ${(_d = (_c = this.mutant) === null || _c === void 0 ? void 0 : _c.coveredByTests) === null || _d === void 0 ? void 0 : _d.filter((test) => { var _a, _b; return !((_b = (_a = this.mutant) === null || _a === void 0 ? void 0 : _a.killedByTests) === null || _b === void 0 ? void 0 : _b.includes(test)); }).map((test) => html `<li class="list-group-item" title="This mutant was covered by this test">☂️ ${describeTest(test)}</li>`)}
    </ul>`;
    }
};
MutationTestReportDrawerMutant.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportDrawerMutant.prototype, "mutant", void 0);
__decorate([
    property({ reflect: true })
], MutationTestReportDrawerMutant.prototype, "mode", void 0);
MutationTestReportDrawerMutant = __decorate([
    customElement('mte-drawer-mutant')
], MutationTestReportDrawerMutant);
export { MutationTestReportDrawerMutant };
//# sourceMappingURL=drawer-mutant.component.js.map