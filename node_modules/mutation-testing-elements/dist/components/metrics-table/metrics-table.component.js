var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, unsafeCSS } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { toAbsoluteUrl } from '../../lib/html-helpers';
import { bootstrap } from '../../style';
import style from './metrics-table.scss';
let MutationTestReportTestMetricsTable = class MutationTestReportTestMetricsTable extends LitElement {
    constructor() {
        super(...arguments);
        this.currentPath = [];
        this.thresholds = {
            high: 80,
            low: 60,
        };
    }
    render() {
        return html `${this.model
            ? html `<table class="table table-hover table-no-top">${this.renderTableHeadRow()}${this.renderTableBody(this.model)}</table>`
            : ''}`;
    }
    renderTableHeadRow() {
        return html `<thead>
      <th scope="col" colspan="2" style="width: 217px">
        <div
          ><span>File / Directory</span
          ><a
            href="https://stryker-mutator.io/docs/mutation-testing-elements/mutant-states-and-metrics"
            target="_blank"
            class="info-icon"
            title="What does this all mean?"
            >â„¹</a
          ></div
        >
      </th>
      ${this.columns.map((column) => this.renderTableHead(column))}
    </thead>`;
    }
    renderTableHead(column) {
        const header = column.tooltip ? html `<mte-tooltip title="${column.tooltip}">${column.label}</mte-tooltip>` : html `<span>${column.label}</span>`;
        if (column.category === 'percentage') {
            return html ` <th colspan="2"> ${header} </th>`;
        }
        return html `<th class="rotate text-center" style="width: ${column.width === 'large' ? 70 : 50}px">
      <div>${header}</div>
    </th>`;
    }
    renderTableBody(model) {
        const renderChildren = () => {
            if (model.file) {
                return undefined;
            }
            else {
                return model.childResults.map((childResult) => {
                    const nameParts = [childResult.name];
                    while (!childResult.file && childResult.childResults.length === 1) {
                        childResult = childResult.childResults[0];
                        nameParts.push(childResult.name);
                    }
                    return this.renderRow(nameParts.join('/'), childResult, ...this.currentPath, ...nameParts);
                });
            }
        };
        return html `<tbody>${this.renderRow(model.name, model)} ${renderChildren()}</tbody>`;
    }
    renderRow(name, row, ...path) {
        return html `<tr title="${row.name}" class="align-middle">
      <td style="width: 32px;" class="icon"><mte-file-icon file-name="${row.name}" ?file="${row.file}"></mte-file-icon></td>
      <td>${path.length > 0 ? html `<a href="${toAbsoluteUrl(...path)}">${name}</a>` : html `<span>${row.name}</span>`}</td>
      ${this.columns.map((column) => this.renderCell(column, row.metrics))}
    </tr>`;
    }
    renderCell(column, metrics) {
        const value = metrics[column.key];
        if (column.category === 'percentage') {
            const valueIsPresent = !isNaN(value);
            const coloringClass = this.determineColoringClass(value);
            const mutationScoreRounded = value.toFixed(2);
            const progressBarStyle = `width: ${value}%`;
            return html `<td>
          ${valueIsPresent
                ? html ` <div class="progress">
                <div
                  class="progress-bar bg-${coloringClass}"
                  role="progressbar"
                  aria-valuenow="${mutationScoreRounded}"
                  aria-valuemin="0"
                  aria-valuemax="100"
                  style="${progressBarStyle}"
                >
                  ${mutationScoreRounded}%
                </div>
              </div>`
                : html ` <span class="fw-bold text-muted">N/A</span> `}
        </td>
        <td style="width: 50px;" class="fw-bold text-center text-${coloringClass}">${valueIsPresent ? mutationScoreRounded : undefined}</td>`;
        }
        return column.isHeader ? html `<th class="text-center">${value}</th>` : html `<td class="text-center">${value}</td>`;
    }
    determineColoringClass(mutationScore) {
        if (!isNaN(mutationScore) && this.thresholds) {
            if (mutationScore < this.thresholds.low) {
                return 'danger';
            }
            else if (mutationScore < this.thresholds.high) {
                return 'warning';
            }
            else {
                return 'success';
            }
        }
        else {
            return 'default';
        }
    }
};
MutationTestReportTestMetricsTable.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportTestMetricsTable.prototype, "model", void 0);
__decorate([
    property()
], MutationTestReportTestMetricsTable.prototype, "currentPath", void 0);
__decorate([
    property({ type: Array })
], MutationTestReportTestMetricsTable.prototype, "columns", void 0);
__decorate([
    property()
], MutationTestReportTestMetricsTable.prototype, "thresholds", void 0);
MutationTestReportTestMetricsTable = __decorate([
    customElement('mte-metrics-table')
], MutationTestReportTestMetricsTable);
export { MutationTestReportTestMetricsTable };
//# sourceMappingURL=metrics-table.component.js.map