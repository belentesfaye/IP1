var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement, unsafeCSS } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { bootstrap } from '../../style';
import style from './test-view.scss';
let MutationTestReportTestViewComponent = class MutationTestReportTestViewComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.drawerMode = 'closed';
        this.handleClick = () => {
            // Close the drawer if the user clicks anywhere in the report (that didn't handle the click already)
            this.drawerMode = 'closed';
        };
        this.handleTestSelected = (event) => {
            this.selectedTest = event.detail.test;
            this.drawerMode = event.detail.selected ? 'half' : 'closed';
        };
    }
    updated(changes) {
        if (changes.has('result') && !this.result.file) {
            this.drawerMode = 'closed';
        }
    }
    render() {
        return html `
      <main @click="${this.handleClick}">
        <div class="row">
          <div class="totals col-sm-11">
            <mte-metrics-table .columns="${COLUMNS}" .currentPath="${this.path}" .model="${this.result}"> </mte-metrics-table>
          </div>
        </div>
        ${this.result.file ? html `<mte-test-file @test-selected="${this.handleTestSelected}" .model="${this.result.file}"></mte-test-file>` : ''}
      </main>
      <mte-drawer-test .mode="${this.drawerMode}" .test="${this.selectedTest}"></mte-drawer-test>
    `;
    }
};
MutationTestReportTestViewComponent.styles = [bootstrap, unsafeCSS(style)];
__decorate([
    property()
], MutationTestReportTestViewComponent.prototype, "drawerMode", void 0);
__decorate([
    property()
], MutationTestReportTestViewComponent.prototype, "result", void 0);
__decorate([
    property({ attribute: false, reflect: false })
], MutationTestReportTestViewComponent.prototype, "path", void 0);
__decorate([
    property()
], MutationTestReportTestViewComponent.prototype, "selectedTest", void 0);
MutationTestReportTestViewComponent = __decorate([
    customElement('mte-test-view')
], MutationTestReportTestViewComponent);
export { MutationTestReportTestViewComponent };
const COLUMNS = [
    { key: 'killing', label: '# Killing', tooltip: 'These tests killed at least one mutant', width: 'normal', category: 'number' },
    {
        key: 'covering',
        label: '# Covering',
        tooltip: 'These tests are covering at least one mutant, but not killing any of them.',
        width: 'normal',
        category: 'number',
    },
    {
        key: 'notCovering',
        label: '# Not Covering',
        tooltip: 'These tests were not covering a mutant (and thus not killing any of them).',
        width: 'normal',
        category: 'number',
    },
    { key: 'total', label: 'Total tests', width: 'large', category: 'number', isHeader: true },
];
//# sourceMappingURL=test-view.js.map