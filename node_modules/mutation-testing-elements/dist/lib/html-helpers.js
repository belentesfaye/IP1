import { TestStatus } from 'mutation-testing-metrics';
import { MutantStatus } from 'mutation-testing-report-schema/api';
import { DRAWER_HALF_OPEN_SIZE } from '../components/drawer/drawer.component';
export function notNullish(value) {
    return value !== null && value !== undefined;
}
export function renderIf(condition, consequence) {
    if (condition) {
        if (typeof consequence === 'function') {
            return consequence();
        }
        else {
            return consequence;
        }
    }
    else {
        return undefined;
    }
}
export function renderIfPresent(value, factory) {
    if (value === null || value === undefined) {
        return undefined;
    }
    else {
        return factory(value);
    }
}
export function getContextClassForStatus(status) {
    switch (status) {
        case MutantStatus.Killed:
            return 'success';
        case MutantStatus.NoCoverage:
            return 'caution'; // custom class
        case MutantStatus.Survived:
            return 'danger';
        case MutantStatus.Timeout:
            return 'warning';
        case MutantStatus.Ignored:
        case MutantStatus.RuntimeError:
        case MutantStatus.CompileError:
            return 'secondary';
    }
}
export function getContextClassForTestStatus(status) {
    switch (status) {
        case TestStatus.Killing:
            return 'success';
        case TestStatus.Covering:
            return 'warning';
        case TestStatus.NotCovering:
            return 'caution';
    }
}
export function getEmojiForTestStatus(status) {
    switch (status) {
        case TestStatus.Killing:
            return 'âœ…';
        case TestStatus.Covering:
            return 'â˜‚';
        case TestStatus.NotCovering:
            return 'ðŸŒ§';
    }
}
export function getEmojiForStatus(status) {
    switch (status) {
        case MutantStatus.Killed:
            return 'âœ…';
        case MutantStatus.NoCoverage:
            return 'ðŸ™ˆ';
        case MutantStatus.Ignored:
            return 'ðŸ¤¥';
        case MutantStatus.Survived:
            return 'ðŸ‘½';
        case MutantStatus.Timeout:
            return 'âŒ›';
        case MutantStatus.RuntimeError:
        case MutantStatus.CompileError:
            return 'ðŸ’¥';
    }
}
export function escapeHtml(unsafe) {
    return unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}
export function toAbsoluteUrl(...fragments) {
    // Use absolute url because of https://github.com/stryker-mutator/mutation-testing-elements/issues/53
    const url = new URL(window.location.href);
    return new URL(`#${fragments.filter(Boolean).join('/')}`, url).href;
}
export function plural(items) {
    if (items.length > 1) {
        return 's';
    }
    return '';
}
export function describeLocation({ fileName, location }) {
    return fileName ? `${fileName}${location ? `:${location.start.line}:${location.start.column}` : ''}` : '';
}
export function scrollToCodeFragmentIfNeeded(el) {
    if (el && !isElementInViewport(el)) {
        el.scrollIntoView({ block: 'center', behavior: 'smooth' });
    }
}
function isElementInViewport(el) {
    const { top, bottom } = el.getBoundingClientRect();
    return top >= 0 && bottom <= (window.innerHeight || document.documentElement.clientHeight) - DRAWER_HALF_OPEN_SIZE;
}
//# sourceMappingURL=html-helpers.js.map